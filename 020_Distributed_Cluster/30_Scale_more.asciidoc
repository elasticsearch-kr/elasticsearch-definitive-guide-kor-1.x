==== 그리고 조금 더 확장하기

하지만, 6개 이상의 node로 검색을 확장하고 싶다면?

primary shard의 수는 index가 생성되는 순간((("indices", "fixed number of primary shards")))((("primary shards", "fixed number in an index")))에 고정된다.
실제로, 그 수는 index안에 _저장_ 될 수 있는 데이터의 최대값을 뜻 한다.
(실제 수는 데이터, H/W, 사용 사례에 따라 달라진다.) 그러나, 읽기 요청--검색 또는 document 검색--은 primary _또는_ replica shard에 의해 처리된다. 따라서
가지고 있는 데이터의 복사본이 많을수록, 더 많은 검색을 처리할 수 있다.

((("scaling", "replica shard수의 증가")))replica shard의 수는 동작하는 cluster에서 동적으로 변경 가능하며,
요청에 따라 확장 또는 축소를 허용한다. replica의 수를 기본값인 `1`에서 `2`로 증가시켜 보자.

[source,js]
--------------------------------------------------
PUT /blogs/_settings
{
   "number_of_replicas" : 2
}
--------------------------------------------------
// SENSE: 020_Distributed_Cluster/30_Replicas.json

<<cluster-three-nodes-two-replicas>>에서 볼수 있듯이, `blogs` index는 지금
9개의 shard를 가진다: 3개의 primary와 6개의 replica이다. 이것은 반복하면 노드당 한개의 Shard로,
총 9개의 노드까지 확장할 수 있음을 의미한다. 이것은 원래의 three-node cluster와 비교해서,
 _3배의_ 검색 성능을 허용한다.

[[cluster-three-nodes-two-replicas]]
.`number_of_replicas`를 2로 증가
image::images/elas_0205.png["2개의 replica shard를 가진 2개의 node cluster"]


[NOTE]
===================================================

물론, 단지 같은 수의 node에서 더 많은 replica shard를 가진다는 것은
각 shard는 node 자원의 더 작은 부분을 차지 하기 때문에,
모든 경우에 있어서 성능을 향상시키는 것은 아니다.
처리량을 늘리기 위해서는 H/W를 추가해야 한다.

그러나, 이러한 추가 replica는 더 많은 복사본을 가지고 있다는 것을 의미한다:
위에서의 node 구성에 있어서,  데이터 손실 없는 두 개의 node 장해를 허용한다.

===================================================
