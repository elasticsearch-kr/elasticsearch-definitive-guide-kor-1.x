[[denormalization-concurrency]]
=== 비정규화와 동시성

물론, 데이터 비정규화도 단점이 있다.((("relationships", "denormalization and concurrency")))((("concurrency", "denormalization and")))((("denormalization", "and concurrency"))) 첫 번째 단점은 모든 블로그 포스트에 대한 `_source` document가 더 커지고,
색인된 field가 더 많이 있기 때문에 index가 더 커진다는 점이다. 이것은 일반적으로 큰 문제가 아니다. 
디스크에 기록된 데이터는 많이 압축되고, 디스크 공간의 가격은 싸다. 
Elasticsearch는 별 문제없이 추가적인 데이터에 대응할 수 있다.

더 중요한 문제는, 사용자가 자신의 이름을 변경하면, 그들의 모든 블로그 게시물도 업데이트해야 한다는 것이다. 
다행스럽게도, 사용자들은 이름을 자주 바꾸지는 않는다. 이름을 변경했다 하더라도, 
한 사용자가 수천 개 이상의 블로그 게시물을 작성하지는 않았을 것이다. 
<<scan-scroll,`scroll`>>과 <<bulk,`bulk`>> API를 이용해, 그들의 블로그 게시물을 업데이트하는 것은 일초 미만으로 가능할 것이다.

하지만, 지금까지의 일반적인 변화보다 더 복잡한 시나리오와, 가장 중요한 동시성을 고려해 보자.((("files", "searching for files in a particular directory")))

이 예제에서, Linux의 filesystem처럼, Elasticsearch의 디렉토리 tree를 가지고 file system을 모방해 볼 것이다.
root 디렉토리는 `/` 이고, 각 디렉토리는 파일과 하위 디렉토리를 가질 수 있다.

아래의 명령과 동일한 기능을 가지도록, 특정 디렉토리에 있는 파일을 검색할 수 있어야 한다.

    grep "some text" /clinton/projects/elasticsearch/*

이를 위해서, 파일이 존재하는 디렉토리의 경로를 색인해야 한다.

[source,json]
--------------------------
PUT /fs/file/1
{
  "name":     "README.txt", <1>
  "path":     "/clinton/projects/elasticsearch", <2>
  "contents": "Starting a new Elasticsearch project is easy..."
}
--------------------------
<1> 파일의 이름
<2> 파일을 가지고 있는 디렉토리의 전체 경로

[NOTE]
==================================================

실제로는, 디렉토리 내의 모든 파일과 하위 디렉토리를 나열하기 위해서, `directory` document를 색인해야 하지만,
간단하게 하기 위해, 그런 요구 사항을 무시한다.

==================================================

또한, 아래의 명령과 동일한 기능을 가지도록, 특정 디렉토리 아래의 디렉토리 tree 어딘가에 있는 파일을 검색할 수 있어야 한다. 

    grep -r "some text" /clinton

이를 지원하기 위해, 경로 계층을 색인 해야 한다.
To support this, we need to index the path hierarchy:

* `/clinton`
* `/clinton/projects`
* `/clinton/projects/elasticsearch`

이 계층은 ((("path_hierarchy tokenizer"))){ref}/analysis-pathhierarchy-tokenizer.html[ `path_hierarchy` tokenizer]를 사용하여,
`path` field에서 자동으로 생성되게 할 수 있다.

[source,json]
--------------------------
PUT /fs
{
  "settings": {
    "analysis": {
      "analyzer": {
        "paths": { <1>
          "tokenizer": "path_hierarchy"
        }
      }
    }
  }
}
--------------------------
<1> 사용자 정의 `paths` analyzer는 기본 설정으로 {ref}/analysis-pathhierarchy-tokenizer.html[`path_hierarchy` tokenizer] 를 사용한다. 

`file` type에 대한 mapping은 아래와 같다.

[source,json]
--------------------------
PUT /fs/_mapping/file
{
  "properties": {
    "name": { <1>
      "type":  "string",
      "index": "not_analyzed"
    },
    "path": { <2>
      "type":  "string",
      "index": "not_analyzed",
      "fields": {
        "tree": { <2>
          "type":     "string",
          "analyzer": "paths"
        }
      }
    }
  }
}
--------------------------
<1> `name` field은 정확한(exact) 이름을 가진다.
<2> `path` field는 정확한(exact) 디렉토리 이름을 가진다. 반면에, `path.tree` field는 경로 계층을 포함하고 있다.

한번 index가 설정되고, 파일이 색인되면, 아래와 같이 `/clinton/projects/elasticsearch` 디렉토리에서 
`elasticsearch` 를 포함하는 파일을 검색할 수 있다.

[source,json]
--------------------------
GET /fs/file/_search
{
  "query": {
    "filtered": {
      "query": {
        "match": {
          "contents": "elasticsearch"
        }
      },
      "filter": {
        "term": { <1>
          "path": "/clinton/projects/elasticsearch"
        }
      }
    }
  }
}
--------------------------
<1> 이 디렉토리에서 파일만 찾는다.

`/clinton` 아래의 모든 하위 디렉토리에 존재하는 모든 파일은, `path.tree` field에 `/clinton` 이라는 단어를 포함하고 있다.
따라서, 다음처럼, `/clinton` 의 모든 하위 디렉토리에서 모든 파일에 대해 검색할 수 있다.

[source,json]
--------------------------
GET /fs/file/_search
{
  "query": {
    "filtered": {
      "query": {
        "match": {
          "contents": "elasticsearch"
        }
      },
      "filter": {
        "term": { <1>
          "path.tree": "/clinton"
        }
      }
    }
  }
}
--------------------------
<1> 이 디렉토리나 그것의 하위 디렉토리에서 파일을 찾는다.

==== 파일과 디렉토리의 이름 변경

지금까지는 아주 좋다. ((("optimistic concurrency control")))((("files", "renaming files and directories")))파일의 이름을 변경하는 것은 간단하다. 
간단한 업데이트나 색인 요청이 필요한 전부이다. 이 요청이 다른 사용자의 요청과 충돌하지 않도록, 
<<optimistic-concurrency-control,낙관적인 동시성 제어>>를 사용해야 할 수도 있다

[source,json]
--------------------------
PUT /fs/file/1?version=2 <1>
{
  "name":     "README.asciidoc",
  "path":     "/clinton/projects/elasticsearch",
  "contents": "Starting a new Elasticsearch project is easy..."
}
--------------------------
<1> `version` number는 index에 있는 document가 동일한 version number를 가지고 있는 경우에만 적용된다는 것을 보장한다.

디렉토리를 변경할 수도 있지만, 이것은 해당 디렉토리 아래의, 경로 계층 모든 곳에 존재하는, 모든 파일을 업데이트하는 것을 의미한다. 
이것은 업데이트해야 할 파일의 수에 따라, 느리거나 빠를 것이다. 파일 모두를 가져오기 위해, <<scan-scroll,scan-and-scroll>>을 사용하고, 
그것을 업데이트하기 위해 <<bulk,`bulk` API>>를 사용한다. 이 프로세스는 원자성을 보장하지 않지만, 모든 파일은 빠르게 그들의 새로운 디렉토리로 이동할 것이다.
