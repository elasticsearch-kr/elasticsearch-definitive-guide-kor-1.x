
== Building Bar Charts

aggregation의 가장 흥미로운 부분 중 하나는, 차트와 그래프로 변경하기가 쉽다는 것이다.((("bar charts, building from aggregations", id="ix_barcharts", range="startofrange")))((("aggregations", "building bar charts from"))) 이 장에서, 예제 데이터 집합에서 뽑아낼 수 있는 다양한 분석에 집중할 것이다. 또한 aggregation에서 가능한 차트의 다양한 유형을 설명할 것이다.

++histogram++ bucket은 특히 유용하다.((("buckets", "histogram")))((("histogram bucket")))((("histograms"))) histogram은 Histograms are 기본적으로 바 차트에 사용된다.
만약 레포트 또는 분석 대시보드를 만든적이 있다면, 분명 histogram을 사용하는 바 차트를 포함하고 있을 것이다.
histogram은 간격(interval)을 지정해야 한다. 판매가격을 histogram한다면, 간격을 20,000으로 지정할 수 있다. 이렇게 하면 매 $20,000마다 새로운 bucket을 생성할 것이고 document는 bucket 안에서 정렬되어 진다.

대시보드에서 가격별 자동차 판매 대수를 알고자 한다. 가격 범위별 총 수입도 필요하다. 이것들은 구간 내에 판매된 자동차의 가격을 합해 계산이 가능하다.

이를 위해 `histogram`과 `sum` metric을 사용한다.

[source,js]
--------------------------------------------------
GET /cars/transactions/_search?search_type=count
{
   "aggs":{
      "price":{
         "histogram":{ <1>
            "field": "price",
            "interval": 20000
         },
         "aggs":{
            "revenue": {
               "sum": { <2>
                 "field" : "price"
               }
             }
         }
      }
   }
}
--------------------------------------------------
// SENSE: 300_Aggregations/30_histogram.json
<1> `histogram`은 두 개(숫자 field와 bucket 크기를 정의하는 interval)의 매개변수가 필요하다.
<2> `sum` metric은 각 가격 범위 안에 중첩된다. 이것은 그룹(bracket)별 총 수입을 나타낸다.

이 query는 `histogram` bucket을 포함하는 `price` aggregation으로 구성되어 있다. 이 bucket은 bucket을 계산할 숫자 field와, interval 크기가 필요하다. interval은 각 bucket의 “폭(wide)”을 정의한다. 20000 이라는 interval은 [0-19999, 20000-39999, …]의 범위를 가진다.

다음으로 histogram 내부에 nested metric을 정의하였다. 이것은 `sum` metric으로 가격 범위에 속한 각 document의 `price` field를 더한 것이다. 이 metric으로 각 가격 범위별 수입을 알 수 있다.

응답을 보자.

[source,js]
--------------------------------------------------
{
...
   "aggregations": {
      "price": {
         "buckets": [
            {
               "key": 0,
               "doc_count": 3,
               "revenue": {
                  "value": 37000
               }
            },
            {
               "key": 20000,
               "doc_count": 4,
               "revenue": {
                  "value": 95000
               }
            },
            {
               "key": 80000,
               "doc_count": 1,
               "revenue": {
                  "value": 80000
               }
            }
         ]
      }
   }
}
--------------------------------------------------

응답에 대해서 따로 설명할 필요는 없겠지만, histogram key는 interval의 하한에 해당한다는 점에 주목해야 한다. key 0은 `0-19,999`, key 20000은 `20,000-39,999` 등이다.

[NOTE]
=====================
$40,000-60,000 범위에 비어있는 interval은 응답에서 제외되는 것을 주목해야 한다. 의도하지 않은 잠재적인 이상한 결과를 만들지 않기 위해, `histogram` bucket은 기본적으로 이러한 것을 생략한다.
다음 섹션에서 empty bucket을 어떻게 포함하는 지를 논할 것이다.
=====================

그래프로 위의 데이터를 histogram에 표시하면 <<barcharts-histo1>>과 같다.

[[barcharts-histo1]]
.Sales and Revenue per price bracket
image::images/elas_28in01.png["Sales and Revenue per price bracket"]

Of course, you can build bar charts with any aggregation that emits categories
and statistics, not just the `histogram` bucket.  Let's build a bar chart of the
top 10 most popular makes, and their average price, and then calculate the standard
error to add error bars on our chart.  This will use the `terms` bucket and
an `extended_stats` ((("extended_stats metric")))metric:

물론, `histogram` bucket만이 아닌, 분류와 통계를 만들어내는 다른 aggregation을 통해서도 막대 그래프는 만들 수 있다. 가장 인기 있는 제조업체, 그들의 평균가를 가지는 막대 그래프를 만들어 보자. 그리고 차트에 오차를 추가하기 위해, 표준 오차를 계산한다. 이것은 `terms` bucket과 `extended_stats` metric을 사용할 것이다.

[source,js]
----
GET /cars/transactions/_search?search_type=count
{
  "aggs": {
    "makes": {
      "terms": {
        "field": "make",
        "size": 10
      },
      "aggs": {
        "stats": {
          "extended_stats": {
            "field": "price"
          }
        }
      }
    }
  }
}
----
이 query는 인기 순으로 정렬된 제조 업체 목록과 각각에 대한 다양한 통계를 반환한다. 특히, `stats.avg`, `stats.count`, `stats.std_deviation`에 관심을 가져보자.((("standard error, calculating"))) 이 정보를 사용하여 표준 오차를 계산할 수 있다.

................................
std_err = std_deviation / count
................................

<<barcharts-bar1>>와 같은 차트를 만들 수 있다.

[[barcharts-bar1]]
.Average price of all makes, with error bars
image::images/elas_28in02.png["Average price of all makes, with error bars"]


((("bar charts, building from aggregations", range="endofrange", startref="ix_barcharts")))
