[[function-score-filters]]
=== Boosting Filtered Subsets - Filter 된 하위 집합에 가중치 부여

<<ignoring-tfidf>> 에서 다루었던 문제로 돌아가 보면,
여기에서는 각 여름용 별장이 가지고 있는 기능의 수로, 별장에 score
((("boosting", "filtered subsets")))((("relevance", "controlling", "boosting filtered subsets")))
를 계산하려 했다.
score 에 영향을 미치는 cached filter 를 사용하는 방법으로 마무리 지었고,
`function_score` query 로 그것을 할 수 있다.((("function_score query", "boosting filtered subsets")))

지금까지 보여준 예들은 모든 document 에 대해, 단일 function 을 사용하고 있다.
이제, filter (기능별로 하나의 filter) 를 사용하여 결과를 하위 집합으로 분할하고,
각 하위집합에 서로 다른 function 을 적용해 보자.

이 예에서 사용하려는 function 은 ((("weight function")))`weight` 이다.
이것은 어떤 query 에서도 사용할 수 있는 `boost` 매개변수와 유사하다.
차이점은 `weight` 는 Lucene 에 의해 모호한 부동 소수점 수로 정규화되지 않는다는 것이다.
그냥 그대로 사용된다.

query 구조는 다수의 function 을 포함하기 위하여 약간 변경된다:

[source,json]
--------------------------------
GET /_search
{
  "query": {
    "function_score": {
      "filter": { <1>
        "term": { "city": "Barcelona" }
      },
      "functions": [ <2>
        {
          "filter": { "term": { "features": "wifi" }}, <3>
          "weight": 1
        },
        {
          "filter": { "term": { "features": "garden" }}, <3>
          "weight": 1
        },
        {
          "filter": { "term": { "features": "pool" }}, <3>
          "weight": 2 <4>
        }
      ],
      "score_mode": "sum", <5>
    }
  }
}
--------------------------------

<1> `function_score` query 는 `query` 대신 `filter` 를 가진다.
<2> `functions` 는 적용하려는 function 의 목록을 가진다.
<3> function 은 `filter` (옵션)에 일치하는 document 에게만 적용된다.
<4> `pool` 기능은 다른 기능보다 중요하기 때문에, `weight` 가 더 높다.
<5> `score_mode` 는 각 function 의 값이 조합되는 방법을 지정한다.

이 예에서 몇 가지 새로운 기능들이 나타났다.

==== filter Versus query

첫 번째는 `query` 대신에 filter((("filters", "in function_score query"))) 를 지정한 것이다.
이 예에서, full text 검색은 필요 없다. 단지, `city` field 에 `Barcelona` 를 가지고 있는
모든 document 가 반환되기를 원할 뿐이다. logic 은 query 보다는 filter 로 더 잘 표현할 수 있다.
filter 에 의해 반환되는 모든 document 는 `_score` 가 `1` 이다.
`function_score` query 는 `query` 나 `filter` 를 가질 수 있다.
아무것도 지정되지 않으면, 기본적으로 `match_all` query 가 사용된다.

==== functions

`functions` 은 적용할 function 의 배열을 가진다.((("function_score query", "functions key")))
배열의 각 요소는 옵션으로 `filter` 를 지정할 수도 있다.
이 경우에 function 은 해당 filter 에 일치하는 document 에게만 적용된다.
이 예에서, filter 에 일치하는 모든 document 에게 `weight` `1` 을 적용했다. (`pool` 의 경우에는 `2`)

==== score_mode

각 function 이 결과를 반환하면, 다수의 결과를, 원래의 `_score` 와 조합될 수 있도록, 하나의 값으로 줄일 방법이 필요하다.
이것이 `score_mode` 매개변수의 역할이다((("function_score query", "score_mode parameter")))
((("score_mode parameter"))).
아래와 같은 값을 가질 수 있다:

`multiply`::
      Function 의 결과를 서로 곱한다. (기본값)

`sum`::
      Function 의 결과는 더해진다.

`avg`::
      모든 function 결과의 평균값.

`max`::
      function 의 결과 중 가장 큰 값이 사용된다.

`min`::
      function 의 결과 중 가장 작은 값이 사용된다.

`first`::
      filter 를 가지지 않거나, document 와 일치하는 filter 를 가진, 첫 번째 function 에서 나온 결과만을 사용한다.

이 예에서, score_mode 에 `sum` 을 사용했기 때문에,
최종 score 를 만들어 내기 위해 filter 에 일치하는 각 결과의 `weight` 를 더한다.

어떤 filter에도 일치하지 않는 document는 원래의 `_score` `1` 그대로이다.
