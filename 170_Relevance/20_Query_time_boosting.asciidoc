[[query-time-boosting]]
=== Query-Time Boosting - Query 시의 가중치 부여

우선 절(<<prioritising-clauses,Prioritizing Clauses>>) 에서,
어떤 query 절이 다른 것보다 더 중요하다는 의미로, ((("relevance", "controlling", "query time boosting")))
((("boosting", "query-time")))
검색 시에 `boost` 매개변수를 사용하는 방법을 설명한 바 있다. 예를 들면:

[source,json]
------------------------------
GET /_search
{
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "title": {
              "query": "quick brown fox",
              "boost": 2 <1>
            }
          }
        },
        {
          "match": { <2>
            "content": "quick brown fox"
          }
        }
      ]
    }
  }
}
------------------------------
<1> 가중치가 `2` 가 부여되었기 때문에, `title` query 절은 `content` query 절보다 두 배 중요하다.
<2> 가중치 값이 없는 query 절은 기본 `가중치` 인 `1` 이다.

_Query 시 가중치_ 는 relevance 를 조정하는데 사용할 수 있는, 주요 tool 이다.
모든 형태의 query 가 `boost` 매개변수를 가질 수 있다.((("boost parameter", "setting value")))
`boost` 를 `2` 로 설정하는 것이 단순히 최종 `_score` 를 두 배로 만드는 것은 아니다.
적용되는 실제 가중치 값은 정규화와 내부 최적화를 통해 처리된다.
그러나, boost `2` 를 가진 절은 boost `1` 을 가진 절의 두 배만큼 중요하다는 의미를 가진다.

사실상, 특정 query 절을 위한 ``올바른'' 가중치 값을 결정하는, 간단한 수식은 없다.
그것은 적용 후 검토(try-it-and-see)의 문제이다.
`가중치` 는 relevance score 에 포함된 요소 중 하나일 뿐이라는 것을 기억하자.
그것은 다른 요소들과 함께 완성되어야 한다.
예를 들어 위의 예제에서, 아마도 `title` field 는, <<field-norm,field-length norm>> 때문에,
이미 `content` field 이상의((("field-length norm"))) ``자연스러운'' 가중치를 가질 것이다.
(title 은 일반적으로 관련된 content 보다 더 짧기 때문이다)
그래서, 가중치를 부여해야 한다는 생각 때문에, 맹목적으로 field 에 가중치를 부여하지는 않는다.
가중치를 적용하고 결과를 확인하자. 그리고 가중치를 바꾸고 다시 확인하자.

==== Boosting an Index - Index에 가중치 부여

여러 index 를 검색하는 경우, `indices_boost` 매개변수를 사용하여,
((("boosting", "query-time", "boosting an index")))((("indices", "boosting an index")))
다른 index 이상으로 특정 index 전체에 가중치를 부여할 수 있다. ((("indices_boost parameter")))
이것은, 다음 예제에서 알 수 있듯이, 더 최근인 index 에 있는 document 에, 더 많은 비중을 주기 위해 사용된다:

[source,json]
------------------------------
GET /docs_2014_*/_search <1>
{
  "indices_boost": { <2>
    "docs_2014_10": 3,
    "docs_2014_09": 2
  },
  "query": {
    "match": {
      "text": "quick brown fox"
    }
  }
}
------------------------------

<1> 이 다중 index 검색은 `docs_2014_` 로 시작하는 모든 indices 에서 찾는다.
<2> `docs_2014_10` index 에 있는 document 는 `3` 이라는 가중치가 부여되고,
    `docs_2014_09` index 에 있는 document 는 `2` 이라는 가중치가 부여되고,
    다른 일치하는 index 에 있는 document 는 기본 가중치 `1`이 부여된다.

==== t.getBoost()

<<practical-scoring-function>> 에서, 이러한 가중치 값은 `t.getBoost()` 요소로 나타낸다.
((("practical scoring function", "t.getBoost() method")))
((("boosting", "query-time", "t.getBoost()")))((("t.getBoost() method")))
가중치는 query DSL 에 표시되는 수준에서는 적용되지 않는다.
대신, 임의의 가중치 값은 조합되고, 각 단어에 전해진다.
`t.getBoost()` 메서드는 단어 자체나 chain 위쪽의 query 에 적용된, `가중치` 값을 반환한다.

[TIP]
==================================================

사실, <<explain,`explain`>> 출력을 읽는 것은, 이것보다 약간 더 복잡하다.
`explanation` 에 언급된 `가중치` 값이나 `t.getBoost()` 을 전혀 알 수 없을 것이다.
대신, 가중치는 특정 단어에 적용된 <<query-norm,`queryNorm`>> 을 합쳐서 하나로 만든 것이다.
비록 `queryNorm` 이 모든 단어에 대해 같다고 말했지만, 가중치가 적용된 단어에 대한 `queryNorm` 은, 
가중치가 적용되지 않은 단어에 대한 `queryNorm` 보다, 더 높다는 것을 알 수 있을 것이다.

==================================================
