[[query-scoring]]
=== Manipulating Relevance with Query Structure - Query 구조에서 Relevance 조정

Elasticsearch 의 query DSL 은 매우 유연하다.
((("relevance", "controlling", "manipulating relevance with query structure")))
((("queries", "manipulating relevance with query structure")))
개별 query 절을, 절의 중요도에 따라, query 계층 구조의 위아래로 옮길 수 있다.
예를 들어, 아래 query 를 가정해 보자:

    quick OR brown OR red OR fox

이것을, ((("bool query", "manipulating relevance with query structure")))
모든 단어를 동일한 수준으로 하는 `bool` query 를 사용해서, 아래와 같이 작성할 수 있다.

[source,json]
------------------------------
GET /_search
{
  "query": {
    "bool": {
      "should": [
        { "term": { "text": "quick" }},
        { "term": { "text": "brown" }},
        { "term": { "text": "red"   }},
        { "term": { "text": "fox"   }}
      ]
    }
  }
}
------------------------------

그러나, 이 query 는, `quick`, `red`, `brown` 을 포함하는 document 와,
`quick`, `red`, `fox` 을 포함하는 다른 document 와 score 가 같을 것이다.
_Red_ 와 _brown_ 은 동의어이고, 둘 중 하나라도 일치하는 document 를 원한다면,
다음과 같이 query 를 표현할 수 있다.

    quick OR (brown OR red) OR fox

표준 boolean logic 에 따르면, 이것은 원래의 query 와 정확히 일치한다.
그러나, <<bool-query,Combining Queries>> 에서 이미 보았듯이,
`bool` query는 document 가 일치하느냐 여부뿐만 아니라, 얼마나 _잘_ 일치하는가 에도 관여한다.
이 query 를 작성하는 더 나은 방법은 아래와 같다.

[source,json]
------------------------------
GET /_search
{
  "query": {
    "bool": {
      "should": [
        { "term": { "text": "quick" }},
        { "term": { "text": "fox"   }},
        {
          "bool": {
            "should": [
              { "term": { "text": "brown" }},
              { "term": { "text": "red"   }}
            ]
          }
        }
      ]
    }
  }
}
------------------------------

이제, `red` 와 `brown` 은 그들 자신의 수준에서 비교를 하고,
`quick`, `fox` 그리고 `red OR brown` 은 최상위의 비교 단어들이다.

<<match-query,`match`>>, <<multi-match-query,`multi_match`>>, <<term-vs-full-text,`term`>>,
<<bool-query,`bool`>> 그리고 <<dis-max-query,`dis_max`>> query 가 score 를 조정하는데 사용될 수 있는 방법에 대해 이야기했었다.
이 장의 나머지 부분에서, query 에 관련된 다른 3개의 score 계산 (`boosting` query, `constant_score` query,
`function_score` query) 을 검토해 보자.
